plugins {
    id 'application'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'org.springframework.boot' version '2.7.11'
    id 'org.owasp.dependencycheck' version '8.0.2'
    id 'com.github.ben-manes.versions' version '0.45.0'
    id 'org.sonarqube' version '3.4.0.2513'
    id 'io.freefair.lombok' version '6.5.1'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'


java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}
sourceSets {

    testUtils {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/testUtils/java')
        }
        resources.srcDir file('src/testUtils/resources')
    }

    functionalTest {
        java {
            compileClasspath += testUtils.output
            runtimeClasspath += testUtils.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += testUtils.output
            runtimeClasspath += testUtils.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += testUtils.output
            runtimeClasspath += testUtils.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.withType(Copy) {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    failFast = true
}

task functional(type: Test) {
  environment 'AZURE_SERVICE_BUS_CONNECTION_STRING','Endpoint=sb://ccd-servicebus-demo.servicebus.windows.net/;SharedAccessKeyName=SendAndReceiveCCDMessage;SharedAccessKey=BXOmN0uU5RZN7KW51soNUv7xNBcNtXqwh+ASbD8y4p4=;EntityPath=st-ccd-case-event'
  environment 'AZURE_SERVICE_BUS_TOPIC_NAME','st-ccd-case-event'

// used for application yaml.file
  environment 'WA_IDAM_CLIENT_ID','sptribs-case-api'
  environment 'WA_IDAM_CLIENT_SECRET', "thUphEveC2Ekuqedaneh4jEcRuba4t2t"
  environment 'WA_IDAM_URL','https://idam-web-public.aat.platform.hmcts.net'
  environment 'WA_IDAM_REDIRECT_URI', 'http://xui-webapp/oauth2/callback'
  environment 'S2S_URL','http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
  environment 'S2S_SECRET_TASK_MANAGEMENT_API','6WI24X55Y6AW6UME'
  environment 'S2S_NAME_TASK_MANAGEMENT_API','sptribs_case_api'
  environment 'CAMUNDA_URL', 'http://camunda-local-bpm/engine-rest'
  environment 'ENABLE_TEST_USER_DELETION', 'false'
  environment 'ROLE_ASSIGNMENT_URL', 'http://role-assignment'
  environment 'WA_SYSTEM_USERNAME','wa-system-user@hmcts.net'
  environment 'WA_SYSTEM_PASSWORD','System01'
//
  environment 'CASEWORKER','st-superuser10@mailinator.com'
  environment 'CASEWORKER_PASSWORD', 'Pa55w0rd11'
    description = "Runs functional tests"
    group = "Verification"
    systemProperty "scenario", System.getProperty('scenario')
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    testLogging.showStandardStreams = true
}

task integration(type: Test) {
    description = "Runs integration tests"
    group = "Verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    failFast = true
}

task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.29'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
    toolVersion = "6.40.0"
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    // https://github.com/pmd/pmd/issues/876
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.required = true
        csv.required = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "Reform :: sptribs-post-deployment-ft-tests"
        property "sonar.projectKey", "uk.gov.hmcts.reform:sptribs-post-deployment-ft-tests"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    }
}

// before committing a change, make sure task still works
dependencyUpdates {
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection -> // <---- notice how the closure argument is named
        return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = 11 //test framework project, never released to production so CVE score not relevant
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

dependencyManagement {
    dependencies {
        // CVE-2018-10237 - Unbounded memory allocation
        dependencySet(group: 'com.google.guava', version: '31.1-jre') {
            entry 'guava'
        }
        dependency group: 'commons-io', name: 'commons-io', version: '2.8.0'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

def versions = [
        junit           : '5.9.2',
        junitPlatform   : '1.9.2',
        reformLogging   : '5.1.9',
        serenity        : '3.1.20',
        tomcat          : '9.0.65'
]

ext.libraries = [
        junit5: [
                "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
                "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
                "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
        ]
]

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.14'

    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
    implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.19.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.19.0'

    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcat
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcat

    implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '4.0.2'

    testImplementation libraries.junit5
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.3'

    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '3.1.4'
    implementation group: 'com.github.hmcts', name: 'core-case-data-store-client', version: '4.9.1'

    implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.11.0'

    testImplementation group: 'com.github.hmcts', name: 'document-management-client', version: '7.0.1'

    testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    testImplementation "org.junit.vintage:junit-vintage-engine:${versions.junit}"
    testImplementation('org.apiguardian:apiguardian-api:1.1.2')

    testUtilsImplementation sourceSets.main.runtimeClasspath
    testUtilsImplementation sourceSets.test.runtimeClasspath

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath

    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath

    smokeTestImplementation sourceSets.main.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.wapostdeploymentfttests.Application'

bootJar {
    getArchiveFileName().set(provider {
        'sptribs-wa-post-deployment-ft-tests.jar'
    })

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
